import numpy as np

def ultimate_algorithm(loss_fn, start_points, field_size, steps=300):
    starts = np.array(start_points, dtype=float).copy()
    paths = []
    
    for start in starts:
        x, y = start
        current_gpa = loss_fn(x, y)
        best_x, best_y, best_gpa = x, y, current_gpa
        path = [(x, y, current_gpa, best_x, best_y, best_gpa)]
        step_size = 0.2
        for _ in range(steps):
            # --- Homework: Implement the Ultimate Algorithm ---
            # You may either:
            #
            # ? Choose an existing method (e.g., Local Beam Search, Genetic Algorithm, etc.)
            #     Example: Local Beam Search
            #     Steps if you choose Local Beam Search:
            #       1. For each current state, generate all 8 neighbors
            #          (using step_size in x and/or y)
            #       2. Collect all neighbors from all k beams
            #       3. Evaluate each neighbor with loss_fn (GPA)
            #       4. Select the top-k neighbors (highest GPA values)
            #       5. These become the new states for the next iteration
            #       6. Append the chosen states to their corresponding paths
            #
            # ? Modify Hill Climbing or Simulated Annealing into an improved version
            #
            # ? Design your own original algorithm
            #
            # ------------------------------------------------------
            
            # --- IMPLEMENTATION START ---
            pass

            # --- IMPLEMENTATION END ---

            # ------------------------------------------------
            # "path" means the whole trajectory of one ship from start to end.
            # Each entry in path should include:
            #   - current ship (x, y, gpa)
            #   - best (x, y, gpa) found so far by this ship
            #
            # "paths" means the collection of all ships' trajectories.
            # For this homework, it should contain 10 paths (one per ship).
            # You can check example_10.txt (generated by main.py) to verify if your code
            #   produces a similar format and result.
            # You can also refer to algo_example.py for a better understanding.
            # Note: best_gpa should only increase over time.
            # ------------------------------------------------
            if current_gpa > best_gpa:
                best_x, best_y, best_gpa = x, y, current_gpa
            path.append((x, y, current_gpa, best_x, best_y, best_gpa))
        paths.append(path)
    return paths
